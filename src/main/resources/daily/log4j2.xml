<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<configuration status="WARN" monitorInterval="600">
    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.log4j2.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.log4j2.WhitespaceThrowablePatternConverter" />
    <conversionRule conversionWord="wEx"
                    converterClass="org.springframework.boot.logging.log4j2.ExtendedWhitespaceThrowablePatternConverter" />

    <!-- 变量配置 -->
    <Properties>
        <Property name="logPath">/data/www/logs/apps/tradejobs/app</Property>
        <Property name="logFile">demo</Property>
        <Property name="patternLayout">[%d{yyyy-MM-dd HH:mm:ss,SSS} %clr{%-5p}] [%t] - %c{1.}(%F:%L) - %X{sdgTraceId} %m%n</Property>
    </Properties>

    <!-- 日志文件所在目录 -->
    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${patternLayout}"/>
        </console>
        <!--文件会打印出所有信息，这个log每次运行程序会自动清空，由append属性决定，这个也挺有用的，适合临时测试用-->
        <File name="log" fileName="${logPath}/test.log" append="false">
            <PatternLayout pattern="${patternLayout}"/>
        </File>
        <!-- 这个会打印出所有的info及以下级别的信息，每8小时日志会自动存入按年份-月份建立的文件夹下面并进行压缩，作为存档-->
        <RollingFile name="RollingFileInfo" fileName="${logPath}/demo.log"
                     filePattern="${logPath}/${logFile}.log.%d{yyyy-MM-dd}.log">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="info" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${patternLayout}"/>
            <Policies>
                <!-- 每天滚动生成新日志文件 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!--  500M生成新日志文件     <SizeBasedTriggeringPolicy size="500 MB"/>-->
            </Policies>
        </RollingFile>
        <RollingFile name="RollingFileError" fileName="${logPath}/demo-error.log"
                     filePattern="${logPath}/${logFile}-error.log-%d{yyyy-MM-dd}.log">
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${patternLayout}"/>
            <Policies>
                <!-- 每天滚动生成新日志文件 -->
                <TimeBasedTriggeringPolicy modulate="true" interval="1"/>
                <!--  500M生成新日志文件     <SizeBasedTriggeringPolicy size="500 MB"/>-->
            </Policies>
        </RollingFile>
    </appenders>

    <!--然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <!--过滤掉spring和mybatis的一些无用的DEBUG,INFO信息-->
        <logger name="org.springframework" level="WARN" />
        <logger name="org.mybatis" level="WARN" />
        <logger name="com.alibaba.dubbo" level="WARN" />

        <!-- 以下打印SQL需依赖log4jdbc -->
        <!-- sql 以及耗费的执行时间 -->
        <logger name="jdbc.sqltiming" level="INFO" additivity="false" >
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
        </logger>
        <!-- 执行之后的返回结果 -->
        <logger name="jdbc.resultsettable" level="OFF" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <!-- 只有sql -->
        <logger name="jdbc.sqlonly" level="OFF" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <logger name="jdbc.audit" level="OFF" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <logger name="jdbc.resultset" level="OFF" additivity="false">
            <appender-ref ref="Console"/>
        </logger>
        <!-- 记录数据库连接和释放信息，可记录当前的数据库连接数，便于诊断连接是否释放 -->
        <logger name="jdbc.connection" level="OFF" additivity="false">
            <appender-ref ref="Console"/>
        </logger>


        <root level="INFO">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFileInfo"/>
            <appender-ref ref="RollingFileError"/>
        </root>
    </loggers>
</configuration>